[{"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\index.js":"1","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\App.js":"2","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\nav.js":"4","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Completedtask.js":"5","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Taskanaylsis\\todoanalysis.js":"6","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\todo.js":"7","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Footer.js":"8","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Homepage\\Homepage.js":"9","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Taskanaylsis\\Completedanalysis.js":"10","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\config.js":"11","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\index.js":"12","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\reportWebVitals.js":"13","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\App.js":"14","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Footer.js":"15","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Completedtask.js":"16","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\todo.js":"17","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\nav.js":"18","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Taskanaylsis\\Completedanalysis.js":"19","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Taskanaylsis\\todoanalysis.js":"20","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Homepage\\Homepage.js":"21","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\config.js":"22"},{"size":288,"mtime":1610607896572,"results":"23","hashOfConfig":"24"},{"size":1210,"mtime":1610978355067,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":2565,"mtime":1610952245496,"results":"27","hashOfConfig":"24"},{"size":4856,"mtime":1610980892775,"results":"28","hashOfConfig":"24"},{"size":3951,"mtime":1610975718818,"results":"29","hashOfConfig":"24"},{"size":7819,"mtime":1610947414613,"results":"30","hashOfConfig":"24"},{"size":1026,"mtime":1610974213004,"results":"31","hashOfConfig":"24"},{"size":15960,"mtime":1610972171425,"results":"32","hashOfConfig":"24"},{"size":4692,"mtime":1610976497099,"results":"33","hashOfConfig":"24"},{"size":85,"mtime":1610947412087,"results":"34","hashOfConfig":"24"},{"size":302,"mtime":1610982653655,"results":"35","hashOfConfig":"36"},{"size":375,"mtime":1610982653655,"results":"37","hashOfConfig":"36"},{"size":1249,"mtime":1610982653639,"results":"38","hashOfConfig":"36"},{"size":1026,"mtime":1610982653639,"results":"39","hashOfConfig":"36"},{"size":4856,"mtime":1610982653639,"results":"40","hashOfConfig":"36"},{"size":7819,"mtime":1610982653639,"results":"41","hashOfConfig":"36"},{"size":2565,"mtime":1610982653639,"results":"42","hashOfConfig":"36"},{"size":4664,"mtime":1610982653639,"results":"43","hashOfConfig":"36"},{"size":3951,"mtime":1610982653639,"results":"44","hashOfConfig":"36"},{"size":15960,"mtime":1610982653639,"results":"45","hashOfConfig":"36"},{"size":85,"mtime":1610982653655,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"yfcpbu",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"d36j0h",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"75"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"75"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\index.js",[],["98","99"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\App.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\nav.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Completedtask.js",["100"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Taskanaylsis\\todoanalysis.js",["101","102"],"import React, { Component } from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { MDBCard,MDBIcon } from \"mdbreact\";\r\nimport variablePie from \"highcharts/modules/variable-pie.js\";\r\nimport axios from 'axios';\r\nimport config from '../../config'\r\n\r\n\r\nvariablePie(Highcharts);\r\n\r\n\r\nconst options = {\r\n  chart: {\r\n    type: \"spline\",\r\n  },\r\n  title: {\r\n    text: \"Pending Task Due Date (Next 1 week)\",\r\n  },\r\n  xAxis: {\r\n    categories: [],\r\n  },\r\n  yAxis: {\r\n    title: { text: \"Number of Pending Task\" },\r\n  },\r\n  series: [\r\n    {\r\n      name: \"Next Week\",\r\n      data: [],\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nconst options2 = {\r\n  chart: {\r\n    type: \"variablepie\",\r\n  },\r\n  title: {\r\n    text: \"Pending Task by Type \",\r\n  },\r\n  tooltip: {\r\n    headerFormat: \"\",\r\n    pointFormat:\r\n      '<span style=\"color:{point.color}\">\\u25CF</span> <b> {point.name}</b><br/>' +\r\n      \"Number Of Pending Task: <b>{point.y}</b><br/>\" \r\n      ,\r\n  },\r\n  series: [\r\n    {\r\n      minPointSize: 10,\r\n      innerSize: \"20%\",\r\n      zMin: 0,\r\n      name: \"Pending Task\",\r\n      data: [\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\n\r\n\r\nclass todoanalysis extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n async componentDidMount() {\r\n    await axios.get(config.apiserver + \"/task/getpendingtaskfornextweek\")\r\n      .then((data) => {\r\n        const monthNames = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"November\",\r\n          \"December\",\r\n        ];\r\n        const values=[]\r\n        const days=[]\r\n        for (var i in data.data){\r\n          values.push(data.data[i].value);\r\n          days.push(\r\n            ((new Date(data.data[i].date)).getDate()-1 )+\" \"+\r\n            monthNames[new Date(data.data[i].date).getMonth()]\r\n          );\r\n        }\r\n        days[0]=days[0]+\" \"+\"(Tomorrow)\" ;\r\n        days[days.length - 1] = days[days.length-1] + \" \" + \"(Next Week)\";\r\n        options.xAxis.categories=days;\r\n        options.series[0].data = values;\r\n      });\r\n\r\n    await axios\r\n      .get(config.apiserver + \"/task/getpendingtaskbytype\")\r\n      .then((data) => {\r\n        const keys = Object.keys(data.data);\r\n        for (var x of keys) {\r\n          const newinput = {\r\n            name: x,\r\n            y: data.data[x],\r\n            z: 8,\r\n          };\r\n          options2.series[0].data.push(newinput);\r\n        }\r\n      });\r\n      this.setState({loading:false})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div>\r\n        <MDBCard style={{ width: \"100%\", textalign: \"center\" }}>\r\n          <div class=\"row\">\r\n            <MDBIcon\r\n              icon=\"chart-line\"\r\n              size=\"2x\"\r\n              style={{\r\n                margin: \"25px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \" 40px\",\r\n              }}\r\n            />\r\n            <h2\r\n              style={{\r\n                margin: \"23px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \"0px\",\r\n              }}\r\n            >\r\n              Pending Task Analysis\r\n            </h2>\r\n          </div>\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"355px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options}\r\n          />\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"340px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options2}\r\n            style={{ width: \"50%\" }}\r\n          />\r\n        </MDBCard>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default todoanalysis;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\todo.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Footer.js",["103"],"import React, { Component } from 'react'\r\nimport {MDBFooter} from 'mdbreact'\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return (\r\n          <footer\r\n            class=\" text-white text-center text-lg-start\"\r\n            style={{\r\n              position: \"absolute\",\r\n              backgroundColor: \"rgb(235, 64, 52)\",\r\n              bottom: \"0\",\r\n              width: \"100%\",\r\n              color: \"white\",\r\n              marginTop:\"500px\"\r\n            }}\r\n          >\r\n            <p>\r\n              <span style={{ margin: \"400px\", fontSize: \"25px\" }}>\r\n                “Don't let yesterday take up too much of today.”\r\n              </span>\r\n            </p>\r\n            <div\r\n              class=\"text-center p-3\"\r\n              style={{ backgroundColor: \"rgba(0, 0, 0, 0.4)\" }}\r\n            >\r\n              <a class=\"text-white\" href=\"https://mdbootstrap.com/\">\r\n                Task Manager\r\n              </a>\r\n            </div>\r\n          </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Homepage\\Homepage.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\components\\Taskanaylsis\\Completedanalysis.js",["104","105"],"import React, { Component } from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport variablePie from \"highcharts/modules/variable-pie.js\";\r\nimport { MDBCard,MDBIcon} from \"mdbreact\";\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n\r\nvariablePie(Highcharts);\r\n\r\nconst options = {\r\n  chart: {\r\n    type: \"spline\",\r\n  },\r\n  title: {\r\n    text: \"Completion Rate (Past 1 week)\",\r\n  },\r\n  xAxis: {\r\n    categories: [],\r\n  },\r\n  yAxis: {\r\n    title: { text: \"Number of Task Completed\" },\r\n  },\r\n  series: [\r\n    {\r\n      name: \"Total Completed Task Past Week\",\r\n      data: [],\r\n    },\r\n    {\r\n      name: \"Total Completed Task (On Time) Past Week\",\r\n      data: [1, 0, 5, 6, 0, 2,3],\r\n    },\r\n    {\r\n      name: \"Total Completed Task (Late) Past Week\",\r\n      data: [1, 0, 1, 0, 0, 3,1],\r\n    },\r\n  ],\r\n};\r\n\r\nconst options2 = {\r\n  chart: {\r\n    type: \"variablepie\",\r\n  },\r\n  title: {\r\n    text: \"Task By Number Completed and Time Taken \",\r\n  },\r\n  tooltip: {\r\n    headerFormat: \"\",\r\n    pointFormat:\r\n      '<span style=\"color:{point.color}\">\\u25CF</span> <b> {point.name}</b><br/>' +\r\n      \"Number Of Completed Task: <b>{point.y}</b><br/>\",\r\n  },\r\n  series: [\r\n    {\r\n      minPointSize: 10,\r\n      innerSize: \"40%\",\r\n      zMin: 0,\r\n      name: \"countries\",\r\n      data: [\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nclass Completedtaskanalysis extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await axios\r\n      .get(config.apiserver+\"/task/getcompletedtaskforpastweek\")\r\n      .then((data) => {\r\n        const monthNames = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"November\",\r\n          \"December\",\r\n        ];\r\n        const values=[]\r\n        const days=[]\r\n        for (var i in data.data){\r\n          values.push(data.data[i].value);\r\n          days.push(\r\n            ((new Date(data.data[i].date)).getDate()-1 )+\" \"+\r\n            monthNames[new Date(data.data[i].date).getMonth()]\r\n          );\r\n        }\r\n        days[0]=days[0]+\" \"+\"(Past Week)\" ;\r\n        days[days.length - 1] = days[days.length-1] + \" \" + \"(Today)\";\r\n        options.xAxis.categories=days;\r\n        options.series[0].data = values;\r\n      });\r\n\r\n      await axios.get(config.apiserver + \"/task/getcompletedtaskontimeforpastweek\").then((data)=>{\r\n        const values = [];\r\n        for (var i in data.data) {\r\n          values.push(data.data[i].value);\r\n        }\r\n        options.series[1].data = values;\r\n      });\r\n\r\n  await axios\r\n    .get(config.apiserver + \"/task/getcompletedtasklateforpastweek\")\r\n    .then((data) => {\r\n      const values = [];\r\n      for (var i in data.data) {\r\n        values.push(data.data[i].value);\r\n      }\r\n      console.log(values);\r\n      options.series[2].data = values;\r\n    });\r\n\r\n    await axios.get(config.apiserver + \"/task/getcompletedtaskbytype\").then(data=>{\r\n      const keys=Object.keys(data.data);\r\n      for(var x of keys){\r\n        const newinput= {\r\n          name:x,\r\n          y:data.data[x],\r\n          z:1\r\n        }\r\n        options2.series[0].data.push(newinput);\r\n      }\r\n    });\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div>\r\n        <MDBCard style={{ width: \"100%\", textalign: \"center\" }}>\r\n          <div class=\"row\">\r\n            <MDBIcon\r\n              icon=\"chart-line\"\r\n              size=\"2x\"\r\n              style={{\r\n                margin: \"25px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \" 40px\",\r\n              }}\r\n            />\r\n            <h2\r\n              style={{\r\n                margin: \"23px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \"0px\",\r\n              }}\r\n            >\r\n              Completed Task Analysis\r\n            </h2>\r\n          </div>\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"355px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options}\r\n          />\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"340px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options2}\r\n          />\r\n        </MDBCard>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Completedtaskanalysis;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\ReactJSApplication\\TaskManager\\src\\config.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\index.js",[],["106","107"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\App.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Footer.js",["108"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Completedtask.js",["109"],"import React, { Component } from 'react'\r\nimport {\r\n  MDBDataTable,\r\n  MDBIcon,\r\n  MDBCard,\r\n  MDBContainer,\r\n  MDBBtn,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter,\r\n  MDBInput\r\n} from \"mdbreact\";\r\nimport axios from \"axios\";\r\nimport config from \"../config\"\r\n\r\nconst data = {\r\n  columns: [\r\n    {\r\n      label: \"\",\r\n      field: \"number\",\r\n      sort: \"asc\",\r\n      width: 150,\r\n    },\r\n    {\r\n      label: \"Task\",\r\n      field: \"task\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Type\",\r\n      field: \"type\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Description\",\r\n      field: \"description\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Due Date\",\r\n      field: \"duedate\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Completed Date\",\r\n      field: \"completeddate\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Status\",\r\n      field: \"status\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n  ],\r\n  rows: [\r\n  ],\r\n};\r\n\r\n\r\nclass completed extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  };\r\n\r\n  Deletedata =() =>{\r\n    this.setState({ loading: true });\r\n    this.deletedata().then(()=>{\r\n      this.componentDidMount();\r\n      this.render();\r\n    })\r\n\r\n  }\r\n\r\n  async deletedata(){\r\n    await axios.delete(config.apiserver + \"/task/deletealldata\").then(() => {\r\n      this.setState({\r\n        modal: !this.state.modal,\r\n      });\r\n    });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var completedtasklist = [];\r\n    await axios\r\n      .get(config.apiserver + \"/task/allcompletedtask\")\r\n      .then((data) => {\r\n        completedtasklist = data.data;\r\n      });\r\n    var i = 1;\r\n    var x;\r\n    for (x of completedtasklist) {\r\n      x[\"number\"] = i;\r\n      i++;\r\n      if (x[\"completeddate\"] != null) {\r\n        x[\"completeddate\"] = x[\"completeddate\"].substring(0, 10);\r\n      }\r\n      if (x[\"duedate\"] != null) {\r\n        x[\"duedate\"] = x[\"duedate\"].substring(0, 10);\r\n      }\r\n    }\r\n    data.rows = completedtasklist;\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <MDBCard style={{ width: \"100%\" }}>\r\n          <div class=\"row\">\r\n            <MDBIcon\r\n              icon=\"calendar-check\"\r\n              size=\"2x\"\r\n              style={{\r\n                margin: \"25px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \" 40px\",\r\n              }}\r\n            />\r\n            <h2\r\n              style={{\r\n                margin: \"23px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \"0px\",\r\n              }}\r\n            >\r\n              Completed Task\r\n            </h2>\r\n            <MDBContainer style={{ float: \"right\", marginTop: \"15px\" }}>\r\n              <MDBBtn\r\n                color=\"danger\"\r\n                onClick={this.toggle}\r\n                style={{ float: \"right\", width: \"250px\" }}\r\n              >\r\n                Reset Data\r\n              </MDBBtn>\r\n              <MDBModal isOpen={this.state.modal} toggle={this.toggle}>\r\n                <MDBModalHeader toggle={this.toggle}>Reset Data</MDBModalHeader>\r\n                <MDBModalBody>\r\n                  <div style={{alignContent:\"center\", justifyContent:\"center\", textAlign:\"center\"}}>\r\n                    <div style={{ textAlign: \"center\" }}>\r\n                      <br />\r\n                      <h4>\r\n                        <MDBIcon icon=\"exclamation-triangle\" className=\"mr-1\" />\r\n                        &nbsp;WARNING !\r\n                      </h4>{\" \"}\r\n                      <br />\r\n                    </div>\r\n                    <p>\r\n                      Deleting Completed task will remove <strong>ALL</strong>\r\n                      &nbsp;task (inclusive of pending) from the database\r\n                      forever! All Data Analytic will also be reset. Change\r\n                      cannot be undone.\r\n                    </p>\r\n                    <MDBBtn color=\"danger\" onClick={this.Deletedata}>\r\n                      Delete Data\r\n                    </MDBBtn>\r\n                  </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter></MDBModalFooter>\r\n              </MDBModal>\r\n            </MDBContainer>\r\n          </div>\r\n        </MDBCard>\r\n        <MDBDataTable\r\n          theadColor=\"grey\"\r\n          theadTextWhite\r\n          striped\r\n          bordered\r\n          small\r\n          fixed\r\n          entriesOptions={[1, 5, 10]}\r\n          entries={10}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default completed;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\todo.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\nav.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Taskanaylsis\\Completedanalysis.js",["110","111"],"import React, { Component } from 'react'\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport variablePie from \"highcharts/modules/variable-pie.js\";\r\nimport { MDBCard,MDBIcon} from \"mdbreact\";\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n\r\nvariablePie(Highcharts);\r\n\r\nconst options = {\r\n  chart: {\r\n    type: \"spline\",\r\n  },\r\n  title: {\r\n    text: \"Completion Rate (Past 1 week)\",\r\n  },\r\n  xAxis: {\r\n    categories: [],\r\n  },\r\n  yAxis: {\r\n    title: { text: \"Number of Task Completed\" },\r\n  },\r\n  series: [\r\n    {\r\n      name: \"Total Completed Task Past Week\",\r\n      data: [],\r\n    },\r\n    {\r\n      name: \"Total Completed Task (On Time) Past Week\",\r\n      data: [1, 0, 5, 6, 0, 2,3],\r\n    },\r\n    {\r\n      name: \"Total Completed Task (Late) Past Week\",\r\n      data: [1, 0, 1, 0, 0, 3,1],\r\n    },\r\n  ],\r\n};\r\n\r\nconst options2 = {\r\n  chart: {\r\n    type: \"variablepie\",\r\n  },\r\n  title: {\r\n    text: \"Task By Number Completed and Time Taken \",\r\n  },\r\n  tooltip: {\r\n    headerFormat: \"\",\r\n    pointFormat:\r\n      '<span style=\"color:{point.color}\">\\u25CF</span> <b> {point.name}</b><br/>' +\r\n      \"Number Of Completed Task: <b>{point.y}</b><br/>\",\r\n  },\r\n  series: [\r\n    {\r\n      minPointSize: 10,\r\n      innerSize: \"40%\",\r\n      zMin: 0,\r\n      name: \"countries\",\r\n      data: [\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nclass Completedtaskanalysis extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await axios\r\n      .get(config.apiserver+\"/task/getcompletedtaskforpastweek\")\r\n      .then((data) => {\r\n        const monthNames = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"November\",\r\n          \"December\",\r\n        ];\r\n        const values=[]\r\n        const days=[]\r\n        for (var i in data.data){\r\n          values.push(data.data[i].value);\r\n          days.push(\r\n            ((new Date(data.data[i].date)).getDate()-1 )+\" \"+\r\n            monthNames[new Date(data.data[i].date).getMonth()]\r\n          );\r\n        }\r\n        days[0]=days[0]+\" \"+\"(Past Week)\" ;\r\n        days[days.length - 1] = days[days.length-1] + \" \" + \"(Today)\";\r\n        options.xAxis.categories=days;\r\n        options.series[0].data = values;\r\n      });\r\n\r\n      await axios.get(config.apiserver + \"/task/getcompletedtaskontimeforpastweek\").then((data)=>{\r\n        const values = [];\r\n        for (var i in data.data) {\r\n          values.push(data.data[i].value);\r\n        }\r\n        options.series[1].data = values;\r\n      });\r\n\r\n  await axios\r\n    .get(config.apiserver + \"/task/getcompletedtasklateforpastweek\")\r\n    .then((data) => {\r\n      const values = [];\r\n      for (var i in data.data) {\r\n        values.push(data.data[i].value);\r\n      }\r\n      options.series[2].data = values;\r\n    });\r\n\r\n    await axios.get(config.apiserver + \"/task/getcompletedtaskbytype\").then(data=>{\r\n      const keys=Object.keys(data.data);\r\n      for(var x of keys){\r\n        const newinput= {\r\n          name:x,\r\n          y:data.data[x],\r\n          z:1\r\n        }\r\n        options2.series[0].data.push(newinput);\r\n      }\r\n    });\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div>\r\n        <MDBCard style={{ width: \"100%\", textalign: \"center\" }}>\r\n          <div class=\"row\">\r\n            <MDBIcon\r\n              icon=\"chart-line\"\r\n              size=\"2x\"\r\n              style={{\r\n                margin: \"25px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \" 40px\",\r\n              }}\r\n            />\r\n            <h2\r\n              style={{\r\n                margin: \"23px\",\r\n                color: \"rgb(88,88,88)\",\r\n                marginLeft: \"0px\",\r\n              }}\r\n            >\r\n              Completed Task Analysis\r\n            </h2>\r\n          </div>\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"355px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options}\r\n          />\r\n        </MDBCard>\r\n        <MDBCard style={{ height: \"340px\" }}>\r\n          <HighchartsReact\r\n            containerProps={{ style: { height: \"100%\" } }}\r\n            highcharts={Highcharts}\r\n            options={options2}\r\n          />\r\n        </MDBCard>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Completedtaskanalysis;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Taskanaylsis\\todoanalysis.js",["112","113"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\components\\Homepage\\Homepage.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\test\\TaskManager\\TaskManager\\src\\config.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":12,"column":3,"nodeType":"120","messageId":"121","endLine":12,"endColumn":11},{"ruleId":"122","severity":1,"message":"123","line":97,"column":28,"nodeType":"124","messageId":"125","endLine":97,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":98,"column":59,"nodeType":"124","messageId":"125","endLine":98,"endColumn":60},{"ruleId":"118","severity":1,"message":"126","line":2,"column":9,"nodeType":"120","messageId":"121","endLine":2,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":100,"column":28,"nodeType":"124","messageId":"125","endLine":100,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":101,"column":59,"nodeType":"124","messageId":"125","endLine":101,"endColumn":60},{"ruleId":"114","replacedBy":"127"},{"ruleId":"116","replacedBy":"128"},{"ruleId":"118","severity":1,"message":"126","line":2,"column":9,"nodeType":"120","messageId":"121","endLine":2,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":12,"column":3,"nodeType":"120","messageId":"121","endLine":12,"endColumn":11},{"ruleId":"122","severity":1,"message":"123","line":100,"column":28,"nodeType":"124","messageId":"125","endLine":100,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":101,"column":59,"nodeType":"124","messageId":"125","endLine":101,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":97,"column":28,"nodeType":"124","messageId":"125","endLine":97,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":98,"column":59,"nodeType":"124","messageId":"125","endLine":98,"endColumn":60},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'MDBInput' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'MDBFooter' is defined but never used.",["129"],["130"],"no-global-assign","no-unsafe-negation"]